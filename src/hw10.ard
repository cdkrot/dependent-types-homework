\import Paths.Meta
\import lect05 (funExt)
\import lect10
\import Utils \hiding (transport,Or,inl,inr)

----------------------------------------------
---        Thank you for the course!       ---
---             ‚ù§  Ô∏èüß°  ‚ù§  Ô∏èüß°  ‚ù§Ô∏è            ---
----------------------------------------------

-- 1. –î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –µ—Å–ª–∏ A : \Prop, —Ç–æ Trunc A —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω A.

\func trunc-prop {A : \Prop} : Trunc A <-> A =>
  (\lam tr => \case tr \with {trunc x => x}, \lam a => trunc a)

-- 2. –î–æ–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–æ–Ω –¥–µ –ú–æ—Ä–≥–∞–Ω–∞.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C)) =>
  (\lam a_bc => \case a_bc.2 \with {
    | inl x => inl (a_bc.1, x)
    | inr y => inr (a_bc.1, y)
  }, \lam ab_ac => \case ab_ac \with {
    | inl x => (x.1, inl x.2)
    | inr y => (y.1, inr y.2)
  })

-- 3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —ç–ª–∏–º–∏–Ω–∞—Ç–æ—Ä –¥–ª—è Or —á–µ—Ä–µ–∑ Or-rec, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ç—Ç–µ—Ä–Ω –º–∞—Ç—á–∏–Ω–≥ –Ω–∞ Or.

\func Or-elim' {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p \elim p
  | inl a => f a
  | inr b => g b

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p =>
  \let tmp => Or-rec {A} {B} { (\Sigma (t : A `Or` B) (C t))} (\lam x =>  (inl x : (Or A B), f x))
                                                              (\lam x =>  (inr x : (Or A B), g x))
                                                              p
    | fst => tmp.1
    | snd => tmp.2
    | fst=p : (fst = p) => Path.inProp _ _
  \in rewriteI fst=p snd


-- 4. –î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ç–∏–ø —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

\func prop-isSet : isSet \Prop =>
  \lam x y eq eq' => Path.inProp eq eq'

-- –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π 5a,5b –Ω–∞ –≤—ã–±–æ—Ä.
-- 5a. –¢–∏–ø –° –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –¥–ª—è –ª—é–±—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ A –∏ B –∏ –ª—é–±—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è f,g : A -> B –≤–µ—Ä–Ω–æ, —á—Ç–æ –µ—Å–ª–∏ h `o` f = h `o` g –¥–ª—è –≤—Å–µ—Ö h : B -> C, —Ç–æ f = g.
--     –î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ \Prop —è–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h `o` f = h `o` g) -> f = g

-- \func coe (A : I -> \Type) (a : A left) (i : I) : A i

\func help {A B : \Set} (f g : A -> B) (x : A) (eq : ((f x) = (f x)) = ((g x) = (g x))) : (f x = g x)
  | f, g, x, eq => \let tmp : \Prop => f x = f x \in path (\lam i => \let ttt => eq @ i \in {?})

\func PropIsCogenerator : isCogenerator \Prop =>
  \lam {A} {B} f g p => \let   func : (B -> \Prop) => \lam x => (x = x)
                             | funeq : (\Pi (x : A) -> f x = g x) => \lam (x : A)
                             => \let tmp : ((f x) = (f x)) = ((g x) = (g x))=> path (\lam i => ((p func) @ i) x)-- pmap (\lam f => f x) (p func)
                                \in path (\lam i => \let t => (tmp @ i)  )
                        \in funExt (\lam _ => B) funeq

-- 5b. –¢–∏–ø X –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –¥–ª—è –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ f : A -> X –∏ –ª—é–±–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏ i : A -> B —Å—É—â–µ—Å–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è l : B -> X —Ç–∞–∫–∞—è, —á—Ç–æ l `o` i = f.
--     –î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ \Prop –∏–Ω—ä–µ–∫—Ç–∏–≤–µ–Ω.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)

\func Prop-isInjective : isInjective \Prop =>
  \lam {A} {B} f i p => \let l : B -> \Prop => \lam x => {?}
  \in (l, funExt (\lam _ => \Prop) ({?}))



