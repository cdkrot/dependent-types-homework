\import Utils
\import lect03 (+-comm, trans)
\import lect04 (Nat-elim, Nat-rec)
\open Nat \hiding (<=)

-- 1. Определите факториал через Nat-rec.

\func fact (n : Nat) : Nat => Nat-rec Nat 1 (\lam newval rec => newval * rec) n

-- 2. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

-- \func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \elim z
-- | 0 => idp
-- | suc z => pmap suc (+-assoc x y z)

\func +-assoc (x y z : Nat) : ((x + y) + z = x + (y + z))
  => Nat-elim (\lam z => (x + y) + z = x + (y + z))
      idp
      (\lam z rec => pmap suc rec)
      z

-- 3. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-rec (P : \Type)
            (val_con1 : Nat -> P)
            (val_con2 : P -> P -> P)
            (val_con3 : (Nat -> P) -> P)
            (x : D) : P \elim x
  | con1 n => val_con1 n
  | con2 x1 x2 => val_con2 (D-rec P val_con1 val_con2 val_con3 x1) (D-rec P val_con1 val_con2 val_con3 x2)
  | con3 f => val_con3 (\lam nat => D-rec P val_con1 val_con2 val_con3 (f nat))

\func D-elim (P : D -> \Type)
             (val_con1 : \Pi (n : Nat) -> P (con1 n))
             (val_con2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
             (val_con3 : \Pi (f : Nat -> D) (f' : \Pi (x : Nat) -> P (f x)) -> P (con3 f))
             (x : D) : P x \elim x
  | con1 n => val_con1 n
  | con2 x1 x2 => val_con2 x1 x2 (D-elim P val_con1 val_con2 val_con3 x1) (D-elim P val_con1 val_con2 val_con3 x2)
  | con3 f => val_con3 f (\lam nat => D-elim P val_con1 val_con2 val_con3 (f nat))

{- To check that the definition of D-elim and D-rec is correct, you can try to implement foo using D-rec.
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}

-- 4. Определите рекурсор и элиминатор для List.

\func List-elim {A : \Type}
                (P : List A -> \Type)
                (val_nil : P nil)
                (val_cons : \Pi (h : A) (t : List A) -> P t -> P (cons h t))
                (l : List A) : P l \elim l
  | nil => val_nil
  | cons a l => val_cons a l (List-elim P val_nil val_cons l)

\func List-rec {A : \Type}
               (P : \Type)
               (val_nil : P)
               (val_cons : A -> P -> P)
               (l : List A) : P => List-elim (\lam lst => P) val_nil (\lam h t recres => val_cons h recres) l

-- 5. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- Optional:
-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => {?}

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => {?}

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p => {?}

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => {?}

-- 7. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons a xs => \let pmap_ch => pmap (vcons a) (vnil-rightId xs)
                             \in \let ttt => vcons-lem (+-comm 0 n) (xs v++ vnil) a
                                 \in \let azaz => ttt *> pmap_ch
                                     \in \let suceq => pmap suc (+-comm 0 n)
                                           \in {?}
  \where \func vcons-lem {A : \Type} {n m : Nat} (p : n = m) (xs : Vec A n) (x : A)
      : (transport (Vec A) (pmap suc p) (vcons x xs)) = vcons x (transport (Vec A) p xs)
      => J (\lam m' p' => transport (Vec A) (pmap suc p') (vcons x xs) = vcons x (transport (Vec A) p' xs))
          idp p


--\func v++-assoc {A : \Type} {n m k : Nat}
--                (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
--  : transport (Vec A) (+-assoc k m n) ((xs v++ ys) v++ zs) = xs v++ (ys v++ zs)
--\elim n, xs
--  | 0, vnil => idp
--  | suc n, vcons a xs => vcons-lem (+-assoc k m n) ((xs v++ ys) v++ zs) a *>
--  pmap (vcons a) (v++-assoc xs ys zs)
--  \where {
--    \func vcons-lem {A : \Type} {n m : Nat} (p : n = m) (xs : Vec A n) (x : A)
--      : transport (Vec A) (pmap suc p) (vcons x xs) = vcons x (transport (Vec A) p xs)
--      => J (\lam m' p' => transport (Vec A) (pmap suc p') (vcons x xs) = vcons x (transport (Vec A) p' xs))
--          idp p
--  }
--


-- 8. Докажите, что 0 не равно suc x, не используя паттерн матчинг на равенстве.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty =>
  transport Tmp p ()
  \where \func Tmp (n : Nat) : \Type
  | 0 => \Sigma
  | (suc z) => Empty
