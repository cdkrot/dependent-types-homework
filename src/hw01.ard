
-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y
-}

\func second (_ : Nat) (x : Nat) (_ : Nat) => x

{-
   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x
-}

\func apply (f : Nat -> Nat) (x : Nat) => f x

{-
   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)
-}

\func compose (f : Nat -> Nat) (g : Nat -> Nat) (x : Nat) => f (g x)

{-
   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x
-}

\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) => f y x

{-
   second' = flip (second 0)
-}

\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func \fix 9 f1 (x y : Nat) => x -- Nat -> Nat -> Nat
\func f2 : Nat => 0  -- Nat
\func \infix 5 f3 (f : Nat -> Nat) (z : Nat) : Int => 0 -- (Nat -> Nat) -> Nat -> Nat
\func f4 : Nat => 0 -- Nat
\func \infix 9 f5 => f1 -- Nat -> Nat -> Nat
\func f6 => f4 -- Nat

-- \func test => (f1 f2) `f3` (f4 `f5` f6)
\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (x : Bool) (t : Bool) (e : Bool) : Bool \elim x
  | true  => t
  | false => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | (suc y') => x * (x ^ y')

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | (suc x') => (suc x') * (fac x')

-- 7. Определите mod и gcd.

\func if' (t : Bool) (x : Nat) (y : Nat) : Nat \elim t
  | true => x
  | false => y

\func mod' (tm x y : Nat) : Nat \elim tm, x, y
  | 0, x, _ => x
  | (suc tm), x, y => if' (x < y) x (mod' tm (x - y) y)

\func mod (x y : Nat) => mod' (x + y) x y

\func gcd' (tm x y : Nat) : Nat \elim tm, x, y
  | _, 0, y => y
  | _, x, 0 => x
  | 0, _, _ => 0
  | (suc tm), x, y => if' (y < x)  (gcd' tm (y - x) x) (gcd' tm (x - y) y)


\func gcd (x y : Nat) => gcd' (x + y) x y